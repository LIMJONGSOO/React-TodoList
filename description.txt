React

Dev enviroment
-Node.js
-Yarn(npm)
-Webpack(여러가지의 파일을 한개로 결합해주는 도구)
-Babel(ES6 등 새로운 자바스크립트 문법 사용을 위한 도구)

JSX javascript XML
-React.createElement를 사용하지 않고 개발할 수 있는 문법
-태그는 닫아야함
-return의 최상위 태그는 1개여야함.(<Fragment>)

조건부
- 삼항연산자 { 조건?true:false }
- { (function() { if (value === 1) return (<div>하나</div>); })() } 
- (() => { if (value === 1) return (<div>하나</div>); })()     

클래스
-객체로 선언해서 사용 
-className으로 속성 지정

주석
-{/* 주석 */}

Props 
- 정적인 데이터
- 부모 컴포넌트가 자식 컴포넌트에게 주는 값
- 자식 컴포넌트에서 수정불가
- defaultProps 기본 props 지정 가능
        컴포넌트 내부에 선언
        static defaultProps = {
            name: '기본이름'
        }

        컴포넌트 외부에 선언
        컴포넌트명.defaultProps = {
            name: '기본이름'
        };


State 
- 동적인 데이터, 클래스형 컴포넌트에서만 사용가능
- 컴포넌트 내부에서 값 변경 가능

메소드
    handleIncrease = () => {
        const { number } = this.state;
        this.setState({
            number: number + 1
        });
    }

setState
    this.setState({
        number: 0,
        foo: {
            ...this.state.foo, //전개연산자 
            foobar: 2
        }
    });

렌더링 함수에서 이벤트 설정 시 
- 이벤트명 camelCase로 작성
- 함수호출이 아닌 함수명 입력 onClick={this.handleIncrease}

LifeCycle API
- constructor(props) 컴포넌트 생성자 함수
- componentDidMount()
    // 외부 라이브러리 연동: D3, masonry, etc   
    // 컴포넌트에서 필요한 데이터 요청: Ajax, GraphQL, etc
    // DOM 에 관련된 작업: 스크롤 설정, 크기 읽어오기 등
- getDerivedStateFromProps(nextProps, prevState) 특정 props 가 바뀔 때 설정하고 설정하고 싶은 state 값을 리턴
- shouldComponentUpdate(nextProps, nextState) render() 함수를 호출할지 말지를 정함
- getSnapshotBeforeUpdate(prevProps, prevState) DOM 업데이트가 일어나기 직전의 시점입니다.
- componentDidUpdate(prevProps, prevState, snapshot) 컴포넌트에서 render() 를 호출하고난 다음에 발생
- componentWillUnmount() 이벤트, setTimeout, 외부 라이브러리 인스턴스 제거

에러
 render() {
    if (this.state.error) return (<h1>에러발생!</h1>);

    return (
      <div></div>
    );
 }